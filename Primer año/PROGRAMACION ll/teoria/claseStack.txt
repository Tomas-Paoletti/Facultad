Estructuras Dinámicas


STACK

La clase Stack es una clase de las llamadas de tipo LIFO (Last In - First Out, o último en entrar - primero en salir). 

Las operaciones básicas son push (que introduce un elemento en la pila), 

a) pop (que saca un elemento de la pila), 
b) push()

b) peek (consulta el primer elemento de la cima de la pila), 
c) empty (que comprueba si la pila está vacía) y 
d)search (que busca un determinado elemento dentro de la pila y devuelve su posición dentro de ella).

import java.util.Stack;

public class Programa {

    public static void main(String arg[]) {

            String cadenano = "(Cadena no equilibrada en paréntesis(()()()))))";

            String cadenasi = "(Cadena equilibrada en parentesis())";

            System.out.println("Verificación equilibrado en paréntesis para cadenano:");

            System.out.println(verificaParentesis(cadenano));

            System.out.println("Verificación equilibrado en paréntesis para cadenasi:");

            System.out.println(verificaParentesis(cadenasi));

    }

 
/* Ejemplo Interface List, clase Stack aprenderaprogramar.com */

import java.util.Stack;

public class Programa {

    public static void main(String arg[]) {

            String cadenano = "(Cadena no equilibrada en paréntesis(()()()))))";

            String cadenasi = "(Cadena equilibrada en parentesis())";

            System.out.println("Verificación equilibrado en paréntesis para cadenano:");

            System.out.println(verificaParentesis(cadenano));

            System.out.println("Verificación equilibrado en paréntesis para cadenasi:");

            System.out.println(verificaParentesis(cadenasi));

    }

 

    public static boolean verificaParentesis(String cadena)  {

        Stack<String> pila = new Stack<String>();       
	int i = 0;

            while (i<cadena.length()) {  // Recorremos la expresión carácter a carácter

                if(cadena.charAt(i)=='('  ) {
                         pila.push( "(" );
                                            } // Si el paréntesis es de apertura apilamos siempre                               

                else if  (cadena.charAt(i)==')'  ) {  // Si el paréntesis es de cierre actuamos según el caso

                            if (!pila.empty()){ 
                                    pila.pop(); } // Si la pila no está vacía desapilamos

                            else { pila.push(")"); break; } // La pila no puede empezar con un cierre, apilamos y salimos

                }

                i++;

            }

            if(pila.empty()){ return true; } else { return false; }

    }

}